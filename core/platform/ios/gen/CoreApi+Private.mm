// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#import "CoreApi+Private.h"
#import "CoreApi.h"
#import "CoreApi+Private.h"
#import "CoreEventLoop+Private.h"
#import "CoreHttp+Private.h"
#import "CoreThreadLauncher+Private.h"
#import "CoreUserListVmHandle+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CoreApi ()

- (id)initWithCpp:(const std::shared_ptr<::core_gen::Api>&)cppRef;

@end

@implementation CoreApi {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::core_gen::Api>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::core_gen::Api>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable CoreApi *)createApi:(nonnull NSString *)rootPath
                       uiThread:(nullable id<CoreEventLoop>)uiThread
                       httpImpl:(nullable id<CoreHttp>)httpImpl
                       launcher:(nullable id<CoreThreadLauncher>)launcher {
    try {
        auto r = ::core_gen::Api::create_api(::djinni::String::toCpp(rootPath),
                                             ::djinni_generated::EventLoop::toCpp(uiThread),
                                             ::djinni_generated::Http::toCpp(httpImpl),
                                             ::djinni_generated::ThreadLauncher::toCpp(launcher));
        return ::djinni_generated::Api::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CoreUserListVmHandle *)observerUserList {
    try {
        auto r = _cppRefHandle.get()->observer_user_list();
        return ::djinni_generated::UserListVmHandle::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)hasUser {
    try {
        auto r = _cppRefHandle.get()->has_user();
        return ::djinni::Bool::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getUsername {
    try {
        auto r = _cppRefHandle.get()->get_username();
        return ::djinni::String::fromCpp(r);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setUsername:(nonnull NSString *)username {
    try {
        _cppRefHandle.get()->set_username(::djinni::String::toCpp(username));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Api::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Api::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CoreApi>(cpp);
}

}  // namespace djinni_generated

@end
