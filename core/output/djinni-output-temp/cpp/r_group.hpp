// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from model.djinni

#pragma once

#include "../model/model.hpp"
#include "../network/json/serialization_json.hpp"
#include <optional/optional.hpp> 
#include <string>
#include <utility>
#include <vector>

namespace core_gen {

/** group */
struct RGroup: public Model  {

    static std::string const TYPE_GROUP;
    std::experimental::optional<std::string> id;
    std::experimental::optional<std::string> groupName;
    std::experimental::optional<std::string> groupType;
    /**	membersCount: optional<i64>; */
    std::experimental::optional<std::vector<std::string>> userIds;
    std::experimental::optional<std::vector<std::string>> owner;
    std::experimental::optional<std::vector<std::string>> admin;

    const static std::string ID;
    const static std::string GROUPNAME;
    const static std::string GROUPTYPE;
    const static std::string USERIDS;
    const static std::string OWNER;
    const static std::string ADMIN;


    JSON_SERIALIZE("id", id, "groupName", groupName, "groupType", groupType, "userIds", userIds, "owner", owner, "admin", admin)

    RGroup(std::experimental::optional<std::string> id_,
           std::experimental::optional<std::string> groupName_,
           std::experimental::optional<std::string> groupType_,
           std::experimental::optional<std::vector<std::string>> userIds_,
           std::experimental::optional<std::vector<std::string>> owner_,
           std::experimental::optional<std::vector<std::string>> admin_)
    : id(std::move(id_))
    , groupName(std::move(groupName_))
    , groupType(std::move(groupType_))
    , userIds(std::move(userIds_))
    , owner(std::move(owner_))
    , admin(std::move(admin_))
    {}
    RGroup() {};
};

}  // namespace core_gen
