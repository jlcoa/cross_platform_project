// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_task_dispatcher.djinni

#include "native_i_task_dispatcher.hpp"  // my header
#include "native_i_task.hpp"

namespace djinni_generated {

NativeITaskDispatcher::NativeITaskDispatcher() : ::djinni::JniInterface<::core_gen::ITaskDispatcher, NativeITaskDispatcher>() {}

NativeITaskDispatcher::~NativeITaskDispatcher() = default;

NativeITaskDispatcher::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeITaskDispatcher::JavaProxy::~JavaProxy() = default;

void NativeITaskDispatcher::JavaProxy::dispatchToUI(const std::shared_ptr<::core_gen::ITask> & c_task) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeITaskDispatcher>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_dispatchToUI,
                           ::djinni::get(::djinni_generated::NativeITask::fromCpp(jniEnv, c_task)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeITaskDispatcher::JavaProxy::dispatchToCore(const std::shared_ptr<::core_gen::ITask> & c_task) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeITaskDispatcher>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_dispatchToCore,
                           ::djinni::get(::djinni_generated::NativeITask::fromCpp(jniEnv, c_task)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeITaskDispatcher::JavaProxy::dispatchToDB(const std::shared_ptr<::core_gen::ITask> & c_task) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeITaskDispatcher>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_dispatchToDB,
                           ::djinni::get(::djinni_generated::NativeITask::fromCpp(jniEnv, c_task)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeITaskDispatcher::JavaProxy::dispatchToBG(const std::shared_ptr<::core_gen::ITask> & c_task) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeITaskDispatcher>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_dispatchToBG,
                           ::djinni::get(::djinni_generated::NativeITask::fromCpp(jniEnv, c_task)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
