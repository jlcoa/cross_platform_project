// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_network_provider.djinni

#pragma once

#include "djinni_support.hpp"
#include "i_network_status_provider.hpp"

namespace djinni_generated {

class NativeINetworkStatusProvider final : ::djinni::JniInterface<::core_gen::INetworkStatusProvider, NativeINetworkStatusProvider> {
public:
    using CppType = std::shared_ptr<::core_gen::INetworkStatusProvider>;
    using CppOptType = std::shared_ptr<::core_gen::INetworkStatusProvider>;
    using JniType = jobject;

    using Boxed = NativeINetworkStatusProvider;

    ~NativeINetworkStatusProvider();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeINetworkStatusProvider>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeINetworkStatusProvider>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeINetworkStatusProvider();
    friend ::djinni::JniClass<NativeINetworkStatusProvider>;
    friend ::djinni::JniInterface<::core_gen::INetworkStatusProvider, NativeINetworkStatusProvider>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::core_gen::INetworkStatusProvider
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void setDelegate(const std::shared_ptr<::core_gen::INetworkStatusDelegate> & delegate) override;
        ::core_gen::ENetworkStatus getNetworkStatus() override;
        void startMonitoring() override;
        void stopMonitoring() override;

    private:
        friend ::djinni::JniInterface<::core_gen::INetworkStatusProvider, ::djinni_generated::NativeINetworkStatusProvider>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/nextuc/INetworkStatusProvider") };
    const jmethodID method_setDelegate { ::djinni::jniGetMethodID(clazz.get(), "setDelegate", "(Lcom/nextuc/INetworkStatusDelegate;)V") };
    const jmethodID method_getNetworkStatus { ::djinni::jniGetMethodID(clazz.get(), "getNetworkStatus", "()Lcom/nextuc/ENetworkStatus;") };
    const jmethodID method_startMonitoring { ::djinni::jniGetMethodID(clazz.get(), "startMonitoring", "()V") };
    const jmethodID method_stopMonitoring { ::djinni::jniGetMethodID(clazz.get(), "stopMonitoring", "()V") };
};

}  // namespace djinni_generated
