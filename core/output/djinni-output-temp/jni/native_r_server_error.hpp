// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from network.djinni

#pragma once

#include "djinni_support.hpp"
#include "r_server_error.hpp"

namespace djinni_generated {

class NativeRServerError final {
public:
    using CppType = ::core_gen::RServerError;
    using JniType = jobject;

    using Boxed = NativeRServerError;

    ~NativeRServerError();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeRServerError();
    friend ::djinni::JniClass<NativeRServerError>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/nextuc/RServerError") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/lang/String;Ljava/lang/String;)V") };
    const jfieldID field_mErrorCode { ::djinni::jniGetFieldID(clazz.get(), "mErrorCode", "Ljava/lang/String;") };
    const jfieldID field_mMessage { ::djinni::jniGetFieldID(clazz.get(), "mMessage", "Ljava/lang/String;") };
    const jfieldID field_mParameterName { ::djinni::jniGetFieldID(clazz.get(), "mParameterName", "Ljava/lang/String;") };
    const jfieldID field_mParameter { ::djinni::jniGetFieldID(clazz.get(), "mParameter", "Ljava/lang/String;") };
    const jfieldID field_mErrors { ::djinni::jniGetFieldID(clazz.get(), "mErrors", "Ljava/util/ArrayList;") };
    const jfieldID field_mError { ::djinni::jniGetFieldID(clazz.get(), "mError", "Ljava/lang/String;") };
    const jfieldID field_mErrorDescription { ::djinni::jniGetFieldID(clazz.get(), "mErrorDescription", "Ljava/lang/String;") };
};

}  // namespace djinni_generated
