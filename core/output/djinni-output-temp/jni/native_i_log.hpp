// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_logger.djinni

#pragma once

#include "djinni_support.hpp"
#include "i_log.hpp"

namespace djinni_generated {

class NativeILog final : ::djinni::JniInterface<::core_gen::ILog, NativeILog> {
public:
    using CppType = std::shared_ptr<::core_gen::ILog>;
    using CppOptType = std::shared_ptr<::core_gen::ILog>;
    using JniType = jobject;

    using Boxed = NativeILog;

    ~NativeILog();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeILog>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeILog>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeILog();
    friend ::djinni::JniClass<NativeILog>;
    friend ::djinni::JniInterface<::core_gen::ILog, NativeILog>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::core_gen::ILog
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void error(const std::string & tag, const std::string & message) override;
        void warning(const std::string & tag, const std::string & message) override;
        void info(const std::string & tag, const std::string & message) override;
        void debug(const std::string & tag, const std::string & message) override;
        void verbose(const std::string & tag, const std::string & message) override;
        void setLogLevel(::core_gen::LogLevel level) override;
        bool visible(::core_gen::LogLevel level) override;

    private:
        friend ::djinni::JniInterface<::core_gen::ILog, ::djinni_generated::NativeILog>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/nextuc/ILog") };
    const jmethodID method_error { ::djinni::jniGetMethodID(clazz.get(), "error", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_warning { ::djinni::jniGetMethodID(clazz.get(), "warning", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_info { ::djinni::jniGetMethodID(clazz.get(), "info", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_debug { ::djinni::jniGetMethodID(clazz.get(), "debug", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_verbose { ::djinni::jniGetMethodID(clazz.get(), "verbose", "(Ljava/lang/String;Ljava/lang/String;)V") };
    const jmethodID method_setLogLevel { ::djinni::jniGetMethodID(clazz.get(), "setLogLevel", "(Lcom/nextuc/LogLevel;)V") };
    const jmethodID method_visible { ::djinni::jniGetMethodID(clazz.get(), "visible", "(Lcom/nextuc/LogLevel;)Z") };
};

}  // namespace djinni_generated
