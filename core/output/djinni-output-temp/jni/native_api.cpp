// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#include "native_api.hpp"  // my header
#include "Marshal.hpp"
#include "native_api.hpp"
#include "native_event_loop.hpp"
#include "native_http.hpp"
#include "native_thread_launcher.hpp"
#include "native_user_list_vm_handle.hpp"

namespace djinni_generated {

NativeApi::NativeApi() : ::djinni::JniInterface<::core_gen::Api, NativeApi>("com/nextuc/Api$CppProxy") {}

NativeApi::~NativeApi() = default;


CJNIEXPORT void JNICALL Java_com_nextuc_Api_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::core_gen::Api>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nextuc_Api_createApi(JNIEnv* jniEnv, jobject /*this*/, jstring j_rootPath, jobject j_uiThread, jobject j_httpImpl, jobject j_launcher)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::core_gen::Api::create_api(::djinni::String::toCpp(jniEnv, j_rootPath),
                                             ::djinni_generated::NativeEventLoop::toCpp(jniEnv, j_uiThread),
                                             ::djinni_generated::NativeHttp::toCpp(jniEnv, j_httpImpl),
                                             ::djinni_generated::NativeThreadLauncher::toCpp(jniEnv, j_launcher));
        return ::djinni::release(::djinni_generated::NativeApi::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_nextuc_Api_00024CppProxy_native_1observerUserList(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::Api>(nativeRef);
        auto r = ref->observer_user_list();
        return ::djinni::release(::djinni_generated::NativeUserListVmHandle::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_nextuc_Api_00024CppProxy_native_1hasUser(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::Api>(nativeRef);
        auto r = ref->has_user();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_nextuc_Api_00024CppProxy_native_1getUsername(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::Api>(nativeRef);
        auto r = ref->get_username();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nextuc_Api_00024CppProxy_native_1setUsername(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_username)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::Api>(nativeRef);
        ref->set_username(::djinni::String::toCpp(jniEnv, j_username));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
