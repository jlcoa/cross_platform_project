// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

#include "native_user_list_vm.hpp"  // my header
#include "Marshal.hpp"
#include "native_user_list_vm_cell.hpp"

namespace djinni_generated {

NativeUserListVm::NativeUserListVm() : ::djinni::JniInterface<::core_gen::UserListVm, NativeUserListVm>("com/nextuc/UserListVm$CppProxy") {}

NativeUserListVm::~NativeUserListVm() = default;


CJNIEXPORT void JNICALL Java_com_nextuc_UserListVm_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::core_gen::UserListVm>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_com_nextuc_UserListVm_00024CppProxy_native_1count(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::UserListVm>(nativeRef);
        auto r = ref->count();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_nextuc_UserListVm_00024CppProxy_native_1get(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::UserListVm>(nativeRef);
        auto r = ref->get(::djinni::I32::toCpp(jniEnv, j_index));
        return ::djinni::release(::djinni::Optional<std::experimental::optional, ::djinni_generated::NativeUserListVmCell>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nextuc_UserListVm_00024CppProxy_native_1deleteRow(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_index)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::UserListVm>(nativeRef);
        ref->delete_row(::djinni::I32::toCpp(jniEnv, j_index));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
