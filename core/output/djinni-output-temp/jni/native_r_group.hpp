// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from model.djinni

#pragma once

#include "djinni_support.hpp"
#include "r_group.hpp"

namespace djinni_generated {

class NativeRGroup final {
public:
    using CppType = ::core_gen::RGroup;
    using JniType = jobject;

    using Boxed = NativeRGroup;

    ~NativeRGroup();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeRGroup();
    friend ::djinni::JniClass<NativeRGroup>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/nextuc/RGroup") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V") };
    const jfieldID field_mId { ::djinni::jniGetFieldID(clazz.get(), "mId", "Ljava/lang/String;") };
    const jfieldID field_mGroupName { ::djinni::jniGetFieldID(clazz.get(), "mGroupName", "Ljava/lang/String;") };
    const jfieldID field_mGroupType { ::djinni::jniGetFieldID(clazz.get(), "mGroupType", "Ljava/lang/String;") };
    const jfieldID field_mUserIds { ::djinni::jniGetFieldID(clazz.get(), "mUserIds", "Ljava/util/ArrayList;") };
    const jfieldID field_mOwner { ::djinni::jniGetFieldID(clazz.get(), "mOwner", "Ljava/util/ArrayList;") };
    const jfieldID field_mAdmin { ::djinni::jniGetFieldID(clazz.get(), "mAdmin", "Ljava/util/ArrayList;") };
};

}  // namespace djinni_generated
