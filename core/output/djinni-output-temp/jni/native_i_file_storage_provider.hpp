// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_file_storage_provider.djinni

#pragma once

#include "djinni_support.hpp"
#include "i_file_storage_provider.hpp"

namespace djinni_generated {

class NativeIFileStorageProvider final : ::djinni::JniInterface<::core_gen::IFileStorageProvider, NativeIFileStorageProvider> {
public:
    using CppType = std::shared_ptr<::core_gen::IFileStorageProvider>;
    using CppOptType = std::shared_ptr<::core_gen::IFileStorageProvider>;
    using JniType = jobject;

    using Boxed = NativeIFileStorageProvider;

    ~NativeIFileStorageProvider();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeIFileStorageProvider>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeIFileStorageProvider>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeIFileStorageProvider();
    friend ::djinni::JniClass<NativeIFileStorageProvider>;
    friend ::djinni::JniInterface<::core_gen::IFileStorageProvider, NativeIFileStorageProvider>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::core_gen::IFileStorageProvider
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string getDocumentsPath(const std::string & relative_path) override;
        void createRelativeFolder(const std::string & relative_path) override;
        void remove(const std::string & path) override;

    private:
        friend ::djinni::JniInterface<::core_gen::IFileStorageProvider, ::djinni_generated::NativeIFileStorageProvider>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/nextuc/IFileStorageProvider") };
    const jmethodID method_getDocumentsPath { ::djinni::jniGetMethodID(clazz.get(), "getDocumentsPath", "(Ljava/lang/String;)Ljava/lang/String;") };
    const jmethodID method_createRelativeFolder { ::djinni::jniGetMethodID(clazz.get(), "createRelativeFolder", "(Ljava/lang/String;)V") };
    const jmethodID method_remove { ::djinni::jniGetMethodID(clazz.get(), "remove", "(Ljava/lang/String;)V") };
};

}  // namespace djinni_generated
