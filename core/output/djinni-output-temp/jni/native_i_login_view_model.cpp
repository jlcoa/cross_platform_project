// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

#include "native_i_login_view_model.hpp"  // my header
#include "Marshal.hpp"
#include "native_e_login_status.hpp"

namespace djinni_generated {

NativeILoginViewModel::NativeILoginViewModel() : ::djinni::JniInterface<::core_gen::ILoginViewModel, NativeILoginViewModel>("com/nextuc/ILoginViewModel$CppProxy") {}

NativeILoginViewModel::~NativeILoginViewModel() = default;


CJNIEXPORT void JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<djinni::CppProxyHandle<::core_gen::ILoginViewModel>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1getUserName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        auto r = ref->getUserName();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1setUserName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_userName)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        ref->setUserName(::djinni::String::toCpp(jniEnv, j_userName));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1getPassword(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        auto r = ref->getPassword();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1setPassword(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_password)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        ref->setPassword(::djinni::String::toCpp(jniEnv, j_password));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1setStatus(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_status)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        ref->setStatus(::djinni_generated::NativeELoginStatus::toCpp(jniEnv, j_status));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1getStatus(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        auto r = ref->getStatus();
        return ::djinni::release(::djinni_generated::NativeELoginStatus::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1isLoading(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        auto r = ref->isLoading();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nextuc_ILoginViewModel_00024CppProxy_native_1setLoading(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_loading)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::core_gen::ILoginViewModel>(nativeRef);
        ref->setLoading(::djinni::Bool::toCpp(jniEnv, j_loading));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
