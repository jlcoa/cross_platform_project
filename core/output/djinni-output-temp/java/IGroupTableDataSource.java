// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

package com.nextuc;

import java.util.concurrent.atomic.AtomicBoolean;

/**# group  */
public abstract class IGroupTableDataSource {
    public abstract int numberOfSections();

    public abstract int numberOfRowsInSection(int section);

    public abstract RGroup objectAt(int section, int row);

    private static final class CppProxy extends IGroupTableDataSource
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int numberOfSections()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_numberOfSections(this.nativeRef);
        }
        private native int native_numberOfSections(long _nativeRef);

        @Override
        public int numberOfRowsInSection(int section)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_numberOfRowsInSection(this.nativeRef, section);
        }
        private native int native_numberOfRowsInSection(long _nativeRef, int section);

        @Override
        public RGroup objectAt(int section, int row)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_objectAt(this.nativeRef, section, row);
        }
        private native RGroup native_objectAt(long _nativeRef, int section, int row);
    }
}
