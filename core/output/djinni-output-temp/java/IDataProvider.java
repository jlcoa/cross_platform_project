// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

package com.nextuc;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class IDataProvider {
    public abstract void setDelegate(IDataChangeDelegate delegate);

    public abstract boolean hasContact(String id);

    public abstract boolean hasGroup(String id);

    public abstract RContact getContact(String id);

    public abstract RGroup getGroup(String id);

    private static final class CppProxy extends IDataProvider
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setDelegate(IDataChangeDelegate delegate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDelegate(this.nativeRef, delegate);
        }
        private native void native_setDelegate(long _nativeRef, IDataChangeDelegate delegate);

        @Override
        public boolean hasContact(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasContact(this.nativeRef, id);
        }
        private native boolean native_hasContact(long _nativeRef, String id);

        @Override
        public boolean hasGroup(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasGroup(this.nativeRef, id);
        }
        private native boolean native_hasGroup(long _nativeRef, String id);

        @Override
        public RContact getContact(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getContact(this.nativeRef, id);
        }
        private native RContact native_getContact(long _nativeRef, String id);

        @Override
        public RGroup getGroup(String id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGroup(this.nativeRef, id);
        }
        private native RGroup native_getGroup(long _nativeRef, String id);
    }
}
