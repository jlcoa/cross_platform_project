// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

package com.nextuc;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Api {
    public abstract UserListVmHandle observerUserList();

    public abstract boolean hasUser();

    public abstract String getUsername();

    public abstract void setUsername(String username);

    public static native Api createApi(String rootPath, EventLoop uiThread, Http httpImpl, ThreadLauncher launcher);

    private static final class CppProxy extends Api
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public UserListVmHandle observerUserList()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_observerUserList(this.nativeRef);
        }
        private native UserListVmHandle native_observerUserList(long _nativeRef);

        @Override
        public boolean hasUser()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasUser(this.nativeRef);
        }
        private native boolean native_hasUser(long _nativeRef);

        @Override
        public String getUsername()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getUsername(this.nativeRef);
        }
        private native String native_getUsername(long _nativeRef);

        @Override
        public void setUsername(String username)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setUsername(this.nativeRef, username);
        }
        private native void native_setUsername(long _nativeRef, String username);
    }
}
