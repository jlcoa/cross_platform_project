// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

package com.nextuc;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class UserListVm {
    /** the total number of results in this list */
    public abstract int count();

    /** get the data for an individual user */
    public abstract UserListVmCell get(int index);

    /**
     * Delete a row from the view model.  This view model will still remain immutable but a
     * new view model will be sent through the observer interface.
     */
    public abstract void deleteRow(int index);

    private static final class CppProxy extends UserListVm
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int count()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_count(this.nativeRef);
        }
        private native int native_count(long _nativeRef);

        @Override
        public UserListVmCell get(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_get(this.nativeRef, index);
        }
        private native UserListVmCell native_get(long _nativeRef, int index);

        @Override
        public void deleteRow(int index)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_deleteRow(this.nativeRef, index);
        }
        private native void native_deleteRow(long _nativeRef, int index);
    }
}
