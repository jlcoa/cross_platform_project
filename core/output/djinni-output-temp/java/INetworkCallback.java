// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_network_provider.djinni

package com.nextuc;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class INetworkCallback {
    public abstract void onSuccess(long requestID, RNetworkResponse response);

    public abstract void onFailure(long requestID, RNetworkResponse response);

    /** For uploading/downloading tasks only */
    public abstract void onProgress(long requestID, int maxSize, int currentPos);

    private static final class CppProxy extends INetworkCallback
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void onSuccess(long requestID, RNetworkResponse response)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSuccess(this.nativeRef, requestID, response);
        }
        private native void native_onSuccess(long _nativeRef, long requestID, RNetworkResponse response);

        @Override
        public void onFailure(long requestID, RNetworkResponse response)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onFailure(this.nativeRef, requestID, response);
        }
        private native void native_onFailure(long _nativeRef, long requestID, RNetworkResponse response);

        @Override
        public void onProgress(long requestID, int maxSize, int currentPos)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onProgress(this.nativeRef, requestID, maxSize, currentPos);
        }
        private native void native_onProgress(long _nativeRef, long requestID, int maxSize, int currentPos);
    }
}
