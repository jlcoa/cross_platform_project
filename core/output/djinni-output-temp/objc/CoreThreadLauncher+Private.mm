// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread.djinni

#import "CoreThreadLauncher+Private.h"
#import "CoreThreadLauncher.h"
#import "CoreAsyncTask+Private.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class ThreadLauncher::ObjcProxy final
: public ::core_gen::ThreadLauncher
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void start_thread(const std::experimental::optional<std::string> & c_name, const std::shared_ptr<::core_gen::AsyncTask> & c_run_fn) override
    {
        @autoreleasepool {
            [Handle::get() startThread:(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(c_name))
                                 runFn:(::djinni_generated::AsyncTask::fromCpp(c_run_fn))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto ThreadLauncher::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ThreadLauncher::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
