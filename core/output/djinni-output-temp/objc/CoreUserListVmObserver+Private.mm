// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

#import "CoreUserListVmObserver+Private.h"
#import "CoreUserListVmObserver.h"
#import "CoreListChange+Private.h"
#import "CoreUserListVm+Private.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class UserListVmObserver::ObjcProxy final
: public ::core_gen::UserListVmObserver
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void on_update(const std::experimental::optional<std::vector<::core_gen::ListChange>> & c_changes, const std::shared_ptr<::core_gen::UserListVm> & c_new_data) override
    {
        @autoreleasepool {
            [Handle::get() onUpdate:(::djinni::Optional<std::experimental::optional, ::djinni::List<::djinni_generated::ListChange>>::fromCpp(c_changes))
                            newData:(::djinni_generated::UserListVm::fromCpp(c_new_data))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto UserListVmObserver::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto UserListVmObserver::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
