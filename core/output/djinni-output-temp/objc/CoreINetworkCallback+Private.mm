// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_network_provider.djinni

#import "CoreINetworkCallback+Private.h"
#import "CoreINetworkCallback.h"
#import "CoreRNetworkResponse+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CoreINetworkCallback ()

- (id)initWithCpp:(const std::shared_ptr<::core_gen::INetworkCallback>&)cppRef;

@end

@implementation CoreINetworkCallback {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::core_gen::INetworkCallback>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::core_gen::INetworkCallback>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onSuccess:(int64_t)requestID
         response:(nonnull CoreRNetworkResponse *)response {
    try {
        _cppRefHandle.get()->onSuccess(::djinni::I64::toCpp(requestID),
                                       ::djinni_generated::RNetworkResponse::toCpp(response));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onFailure:(int64_t)requestID
         response:(nonnull CoreRNetworkResponse *)response {
    try {
        _cppRefHandle.get()->onFailure(::djinni::I64::toCpp(requestID),
                                       ::djinni_generated::RNetworkResponse::toCpp(response));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onProgress:(int64_t)requestID
           maxSize:(int32_t)maxSize
        currentPos:(int32_t)currentPos {
    try {
        _cppRefHandle.get()->onProgress(::djinni::I64::toCpp(requestID),
                                        ::djinni::I32::toCpp(maxSize),
                                        ::djinni::I32::toCpp(currentPos));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto INetworkCallback::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto INetworkCallback::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CoreINetworkCallback>(cpp);
}

}  // namespace djinni_generated

@end
