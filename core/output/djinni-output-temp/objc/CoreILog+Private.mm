// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from pal_logger.djinni

#import "CoreILog+Private.h"
#import "CoreILog.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class ILog::ObjcProxy final
: public ::core_gen::ILog
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void error(const std::string & c_tag, const std::string & c_message) override
    {
        @autoreleasepool {
            [Handle::get() error:(::djinni::String::fromCpp(c_tag))
                         message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void warning(const std::string & c_tag, const std::string & c_message) override
    {
        @autoreleasepool {
            [Handle::get() warning:(::djinni::String::fromCpp(c_tag))
                           message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void info(const std::string & c_tag, const std::string & c_message) override
    {
        @autoreleasepool {
            [Handle::get() info:(::djinni::String::fromCpp(c_tag))
                        message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void debug(const std::string & c_tag, const std::string & c_message) override
    {
        @autoreleasepool {
            [Handle::get() debug:(::djinni::String::fromCpp(c_tag))
                         message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void verbose(const std::string & c_tag, const std::string & c_message) override
    {
        @autoreleasepool {
            [Handle::get() verbose:(::djinni::String::fromCpp(c_tag))
                           message:(::djinni::String::fromCpp(c_message))];
        }
    }
    void setLogLevel(::core_gen::LogLevel c_level) override
    {
        @autoreleasepool {
            [Handle::get() setLogLevel:(::djinni::Enum<::core_gen::LogLevel, CoreLogLevel>::fromCpp(c_level))];
        }
    }
    bool visible(::core_gen::LogLevel c_level) override
    {
        @autoreleasepool {
            auto r = [Handle::get() visible:(::djinni::Enum<::core_gen::LogLevel, CoreLogLevel>::fromCpp(c_level))];
            return ::djinni::Bool::toCpp(r);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto ILog::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ILog::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
